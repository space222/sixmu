----------------------
sixmu todo/task list
----------------------

0. Debugger based on Dear IMGUI?
1. SI/PIF DMA and Input
	- SI/PIF is incredibly complex. Just getting the LaC-doc type input going for now.
2. HLE - print out the display list for gfx/audio tasks and see how much I can implement
		- it's very motivational to actually see things on the screen, so even 
			a glitchy Mario head would be basically a personal victory.

--------------------------
Recompiler todo/task list
--------------------------

1. give the invalidator another look through
	- as far as I can at the moment, it should be working, but clearly has different
	  and poorer results than the interpreter
2. see if the recomiler is still going nuts and crashing with now-probably-currect values in PIFseed @0x7E4.
	- I don't think I changed anything, but (apparently) correct values get thru the bootcode in both the 
		interpreter and the recomp now, I think
	- will take tracing the beginning of the PIF, matching the recomp output, and figuring out which instruction
	  is failing if any. Somewhere there's still memory corruption / stack overflow if ram to be compiled is 
	  full of garbage jumps.
3. Figure out why the planet console demo will run sometimes, but crash on boot other times.
	- it immediately jumps to beyond 0xB0000000. It might be trying to run from the cart, I don't know
		if that's supposed to be possible, the recompiler shouldn't even be working for that.
	- don't think it is related to 4, but possible
4. FPU instructions - still need the non-easy comparisons, anything unordered or "signaled", etc

-------------------
Other Impl. Notes
-------------------

The only FPU comparison instructions supported are ones that are the simplest
less than, greater than, etc. I'll get on the unordered, signaled, etc, later.

I've reduced the instructions per scanline from my deduced ~2975 to a ~547
that has a PeterLemon timing test get much closer to the test's expected values.

Compiling with Clang has worse results (HCS demos don't work), thought 
maybe it would be how much UB I'm using with the memory arrays (casting to
whatever pointer type, technical euw, but the easiest way to express it, 
at least at first), but changing some things to memcpy did not have any effect.

I think it's unavoidable most (all?) of the FPU instructions will need to branch
(whether if or ?:) based on whether regs are 64 or 32bit. I've been unable to
find any info on what the physical arrangement is and how the apparent values 
would change when the Status register bit is changed. Under the assumption that
this would be considered undefined behavior to set bits, change SR bit, then
use floating point operations, that will be ignored. In one situation, each
32bit register will be the 4*register-number bytes into the register array, 
with the 64bit regs being the same for doubles. In the other situation, each 32bit
register will be the low 32bits of the same number 64bit register. Any code
that depends on floating point values across changing the Status register bit
will likely fail.

The recompiler is now ignoring a BGEZAL instruction once if it appears at a specific
address in order to get the standard boot process working. All the '-d' option
does now, is speed things up semi-imperceptibly due to not needing the pif and bootcode
to run.

At first, the SI DMA/PIF/Input implementation (like most things) is going to be 
entirely based on the old LaC docs and PeterLemon tests of the same.

Have no idea what values are correct for the "RDRAM Registers" (not the RI) at 3F00000 
at the top of the RDRAM area. Also no idea if it's at all necessary for the DP Span
registers to do anything. Same with the "RI" registers at 0xa47..

RAM is bswapped, and the 32bit SDL surfaces work fine like that, but they can't deal 
with bswapped 16bit values. Getting 16bit data to the screen involves a detour to 
copy to another buffer bswapping along the way. Also, SDL surfaces alpha blend 
by default.

VI only supports 320x240 or 640x480, 16 or 32bit (the basic options) detecting based
on the most basic (and specific) values to write to the VI. No support for anything
more fancy (like 640x240) or scaling tricks or non-resolution sized framebuffer lines.

For now, I'm only supporting 16bit-swapped and already-correct roms. I've read
that 32bit-swapped is rare. I don't know how true that is, but I haven't encountered any so far.

If I ever start a recompiler for the RSP, it'll need to be plain C, libtcc doesn't support SSE
intrinsics. The alternative would be to output bytes in inline asm or just use a different
JIT library(/write one). 

The RSP interpreter passes a few krom/PeterLemon test ROMs. Would rather HLE things though.

---------------
Dynarec notes
---------------

For certain values of PIFseed@7e4, the recompiler goes nuts and crashes when the bootcode
gets to the point of running in IMEM.

In Sixmu, the recomp came first. I wrote the interpreter for debugging purposes.

Basic blocks only with no internal jumping, and not over 
~250 instructions. Interrupts are checked only between block executions.

Currently not supporting the TLB, with a main reason being not knowning
how to support it in the dynarec.

DDIV instructions are causing "floating point exception" crashes. Apparently this happens
when the result won't fit in the destination register bitsize. This shouldn't be
possible with C code. Either there's a bug in libtcc, or I'm doing something horribly
wrong/UB. I've gotten things to the point that only DDIV crashes, by using inline assembly.
All other PeterLemon CPU (and CP1) instruction tests pass. Oddly enough DDIV crashes 
in the interpreter too, is it just not possible to be carefree while doing max-size division?

A libtcc state can't be used more than once (?). Need to create/destroy tcc_state object
for every BasicBlock compiled.

-----------------
RSP Stuff
-----------------

I've actually started a RSP interpreter, SU is done. VU has a few instructions (mostly
bitwise, although add/sub pass the krom tests). I'm sure my load/store needs work,
endian issues all over the place. VMOV doesn't pass the tests, either because of endian
issues or I don't understand the accumulator well enough.

Implementing the RSP Scalar Unit should be simple as that code basically already exists
for the regular CPU, the RSP-SU is just a 32bit version. For the vector unit, non-optimal
looping is the order of the day as libtcc doesn't support SSE intrinsics. That's a rather
future thing though.

At first, I'd like to try to just HLE the display lists to get things playable. I'm either
nowhere near getting games to the point of trying to use uCodes, or on the cusp because
they appear to be either waiting in infinite loops for events (which should be happening as I 
implemented interrupts which are running) after dispatching an initial thread or actually
servicing the VI interrupt. Even the ones that actually handle the VI interrupt end up not
actually doing anything else though.













